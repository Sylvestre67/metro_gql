// Code generated by Prisma (prisma@1.26.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  gene: (where?: GeneWhereInput) => Promise<boolean>;
  sample: (where?: SampleWhereInput) => Promise<boolean>;
  sampleTissue: (where?: SampleTissueWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  variant: (where?: VariantWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  gene: (where: GeneWhereUniqueInput) => GenePromise;
  genes: (args?: {
    where?: GeneWhereInput;
    orderBy?: GeneOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Gene>;
  genesConnection: (args?: {
    where?: GeneWhereInput;
    orderBy?: GeneOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GeneConnectionPromise;
  sample: (where: SampleWhereUniqueInput) => SamplePromise;
  samples: (args?: {
    where?: SampleWhereInput;
    orderBy?: SampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Sample>;
  samplesConnection: (args?: {
    where?: SampleWhereInput;
    orderBy?: SampleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SampleConnectionPromise;
  sampleTissue: (where: SampleTissueWhereUniqueInput) => SampleTissuePromise;
  sampleTissues: (args?: {
    where?: SampleTissueWhereInput;
    orderBy?: SampleTissueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SampleTissue>;
  sampleTissuesConnection: (args?: {
    where?: SampleTissueWhereInput;
    orderBy?: SampleTissueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SampleTissueConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  variant: (where: VariantWhereUniqueInput) => VariantPromise;
  variants: (args?: {
    where?: VariantWhereInput;
    orderBy?: VariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Variant>;
  variantsConnection: (args?: {
    where?: VariantWhereInput;
    orderBy?: VariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VariantConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGene: (data: GeneCreateInput) => GenePromise;
  updateGene: (args: {
    data: GeneUpdateInput;
    where: GeneWhereUniqueInput;
  }) => GenePromise;
  updateManyGenes: (args: {
    data: GeneUpdateManyMutationInput;
    where?: GeneWhereInput;
  }) => BatchPayloadPromise;
  upsertGene: (args: {
    where: GeneWhereUniqueInput;
    create: GeneCreateInput;
    update: GeneUpdateInput;
  }) => GenePromise;
  deleteGene: (where: GeneWhereUniqueInput) => GenePromise;
  deleteManyGenes: (where?: GeneWhereInput) => BatchPayloadPromise;
  createSample: (data: SampleCreateInput) => SamplePromise;
  updateSample: (args: {
    data: SampleUpdateInput;
    where: SampleWhereUniqueInput;
  }) => SamplePromise;
  updateManySamples: (args: {
    data: SampleUpdateManyMutationInput;
    where?: SampleWhereInput;
  }) => BatchPayloadPromise;
  upsertSample: (args: {
    where: SampleWhereUniqueInput;
    create: SampleCreateInput;
    update: SampleUpdateInput;
  }) => SamplePromise;
  deleteSample: (where: SampleWhereUniqueInput) => SamplePromise;
  deleteManySamples: (where?: SampleWhereInput) => BatchPayloadPromise;
  createSampleTissue: (data: SampleTissueCreateInput) => SampleTissuePromise;
  updateSampleTissue: (args: {
    data: SampleTissueUpdateInput;
    where: SampleTissueWhereUniqueInput;
  }) => SampleTissuePromise;
  updateManySampleTissues: (args: {
    data: SampleTissueUpdateManyMutationInput;
    where?: SampleTissueWhereInput;
  }) => BatchPayloadPromise;
  upsertSampleTissue: (args: {
    where: SampleTissueWhereUniqueInput;
    create: SampleTissueCreateInput;
    update: SampleTissueUpdateInput;
  }) => SampleTissuePromise;
  deleteSampleTissue: (
    where: SampleTissueWhereUniqueInput
  ) => SampleTissuePromise;
  deleteManySampleTissues: (
    where?: SampleTissueWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVariant: (data: VariantCreateInput) => VariantPromise;
  updateVariant: (args: {
    data: VariantUpdateInput;
    where: VariantWhereUniqueInput;
  }) => VariantPromise;
  updateManyVariants: (args: {
    data: VariantUpdateManyMutationInput;
    where?: VariantWhereInput;
  }) => BatchPayloadPromise;
  upsertVariant: (args: {
    where: VariantWhereUniqueInput;
    create: VariantCreateInput;
    update: VariantUpdateInput;
  }) => VariantPromise;
  deleteVariant: (where: VariantWhereUniqueInput) => VariantPromise;
  deleteManyVariants: (where?: VariantWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  gene: (
    where?: GeneSubscriptionWhereInput
  ) => GeneSubscriptionPayloadSubscription;
  sample: (
    where?: SampleSubscriptionWhereInput
  ) => SampleSubscriptionPayloadSubscription;
  sampleTissue: (
    where?: SampleTissueSubscriptionWhereInput
  ) => SampleTissueSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  variant: (
    where?: VariantSubscriptionWhereInput
  ) => VariantSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type SampleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sample_tissue_ASC"
  | "sample_tissue_DESC"
  | "z_score_ASC"
  | "z_score_DESC"
  | "gene_ASC"
  | "gene_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SampleTissueOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "tissue_ASC"
  | "tissue_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GeneOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gene_ASC"
  | "gene_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VariantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rsid_ASC"
  | "rsid_DESC"
  | "type_ASC"
  | "type_DESC"
  | "samples_ASC"
  | "samples_DESC"
  | "chromosome_ASC"
  | "chromosome_DESC"
  | "position_ASC"
  | "position_DESC"
  | "reference_ASC"
  | "reference_DESC"
  | "alternative_ASC"
  | "alternative_DESC"
  | "effect_ASC"
  | "effect_DESC"
  | "impact_ASC"
  | "impact_DESC"
  | "feature_type_ASC"
  | "feature_type_DESC"
  | "feature_id_ASC"
  | "feature_id_DESC"
  | "hgvs_codon_change_ASC"
  | "hgvs_codon_change_DESC"
  | "hgvs_protein_change_ASC"
  | "hgvs_protein_change_DESC"
  | "clinvar_significance_ASC"
  | "clinvar_significance_DESC"
  | "clinvar_disease_ASC"
  | "clinvar_disease_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SampleTissueWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type GeneWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SampleTissueUpdateInput {
  tissue?: String;
}

export interface GeneSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GeneWhereInput;
  AND?: GeneSubscriptionWhereInput[] | GeneSubscriptionWhereInput;
  OR?: GeneSubscriptionWhereInput[] | GeneSubscriptionWhereInput;
  NOT?: GeneSubscriptionWhereInput[] | GeneSubscriptionWhereInput;
}

export interface SampleTissueCreateInput {
  tissue: String;
}

export interface VariantUpdateInput {
  rsid?: String;
  type?: String;
  samples?: Int;
  chromosome?: Int;
  position?: Int;
  reference?: String;
  alternative?: String;
  effect?: String;
  impact?: String;
  feature_type?: String;
  feature_id?: String;
  hgvs_codon_change?: String;
  hgvs_protein_change?: String;
  clinvar_significance?: String;
  clinvar_disease?: String;
}

export interface SampleUpdateManyMutationInput {
  sample_tissue?: String;
  z_score?: Int;
  gene?: String;
}

export interface VariantCreateInput {
  rsid?: String;
  type?: String;
  samples?: Int;
  chromosome?: Int;
  position?: Int;
  reference?: String;
  alternative?: String;
  effect?: String;
  impact?: String;
  feature_type?: String;
  feature_id?: String;
  hgvs_codon_change?: String;
  hgvs_protein_change?: String;
  clinvar_significance?: String;
  clinvar_disease?: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SampleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SampleWhereInput;
  AND?: SampleSubscriptionWhereInput[] | SampleSubscriptionWhereInput;
  OR?: SampleSubscriptionWhereInput[] | SampleSubscriptionWhereInput;
  NOT?: SampleSubscriptionWhereInput[] | SampleSubscriptionWhereInput;
}

export interface SampleUpdateInput {
  sample_tissue?: String;
  z_score?: Int;
  gene?: String;
}

export interface UserUpdateInput {
  name?: String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface VariantSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VariantWhereInput;
  AND?: VariantSubscriptionWhereInput[] | VariantSubscriptionWhereInput;
  OR?: VariantSubscriptionWhereInput[] | VariantSubscriptionWhereInput;
  NOT?: VariantSubscriptionWhereInput[] | VariantSubscriptionWhereInput;
}

export interface GeneWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  gene?: String;
  gene_not?: String;
  gene_in?: String[] | String;
  gene_not_in?: String[] | String;
  gene_lt?: String;
  gene_lte?: String;
  gene_gt?: String;
  gene_gte?: String;
  gene_contains?: String;
  gene_not_contains?: String;
  gene_starts_with?: String;
  gene_not_starts_with?: String;
  gene_ends_with?: String;
  gene_not_ends_with?: String;
  AND?: GeneWhereInput[] | GeneWhereInput;
  OR?: GeneWhereInput[] | GeneWhereInput;
  NOT?: GeneWhereInput[] | GeneWhereInput;
}

export interface SampleTissueWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  tissue?: String;
  tissue_not?: String;
  tissue_in?: String[] | String;
  tissue_not_in?: String[] | String;
  tissue_lt?: String;
  tissue_lte?: String;
  tissue_gt?: String;
  tissue_gte?: String;
  tissue_contains?: String;
  tissue_not_contains?: String;
  tissue_starts_with?: String;
  tissue_not_starts_with?: String;
  tissue_ends_with?: String;
  tissue_not_ends_with?: String;
  AND?: SampleTissueWhereInput[] | SampleTissueWhereInput;
  OR?: SampleTissueWhereInput[] | SampleTissueWhereInput;
  NOT?: SampleTissueWhereInput[] | SampleTissueWhereInput;
}

export interface SampleCreateInput {
  sample_tissue: String;
  z_score: Int;
  gene: String;
}

export interface VariantUpdateManyMutationInput {
  rsid?: String;
  type?: String;
  samples?: Int;
  chromosome?: Int;
  position?: Int;
  reference?: String;
  alternative?: String;
  effect?: String;
  impact?: String;
  feature_type?: String;
  feature_id?: String;
  hgvs_codon_change?: String;
  hgvs_protein_change?: String;
  clinvar_significance?: String;
  clinvar_disease?: String;
}

export interface GeneUpdateManyMutationInput {
  gene?: String;
}

export interface SampleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  sample_tissue?: String;
  sample_tissue_not?: String;
  sample_tissue_in?: String[] | String;
  sample_tissue_not_in?: String[] | String;
  sample_tissue_lt?: String;
  sample_tissue_lte?: String;
  sample_tissue_gt?: String;
  sample_tissue_gte?: String;
  sample_tissue_contains?: String;
  sample_tissue_not_contains?: String;
  sample_tissue_starts_with?: String;
  sample_tissue_not_starts_with?: String;
  sample_tissue_ends_with?: String;
  sample_tissue_not_ends_with?: String;
  z_score?: Int;
  z_score_not?: Int;
  z_score_in?: Int[] | Int;
  z_score_not_in?: Int[] | Int;
  z_score_lt?: Int;
  z_score_lte?: Int;
  z_score_gt?: Int;
  z_score_gte?: Int;
  gene?: String;
  gene_not?: String;
  gene_in?: String[] | String;
  gene_not_in?: String[] | String;
  gene_lt?: String;
  gene_lte?: String;
  gene_gt?: String;
  gene_gte?: String;
  gene_contains?: String;
  gene_not_contains?: String;
  gene_starts_with?: String;
  gene_not_starts_with?: String;
  gene_ends_with?: String;
  gene_not_ends_with?: String;
  AND?: SampleWhereInput[] | SampleWhereInput;
  OR?: SampleWhereInput[] | SampleWhereInput;
  NOT?: SampleWhereInput[] | SampleWhereInput;
}

export interface GeneUpdateInput {
  gene?: String;
}

export interface UserCreateInput {
  name: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface VariantWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  rsid?: String;
  rsid_not?: String;
  rsid_in?: String[] | String;
  rsid_not_in?: String[] | String;
  rsid_lt?: String;
  rsid_lte?: String;
  rsid_gt?: String;
  rsid_gte?: String;
  rsid_contains?: String;
  rsid_not_contains?: String;
  rsid_starts_with?: String;
  rsid_not_starts_with?: String;
  rsid_ends_with?: String;
  rsid_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  samples?: Int;
  samples_not?: Int;
  samples_in?: Int[] | Int;
  samples_not_in?: Int[] | Int;
  samples_lt?: Int;
  samples_lte?: Int;
  samples_gt?: Int;
  samples_gte?: Int;
  chromosome?: Int;
  chromosome_not?: Int;
  chromosome_in?: Int[] | Int;
  chromosome_not_in?: Int[] | Int;
  chromosome_lt?: Int;
  chromosome_lte?: Int;
  chromosome_gt?: Int;
  chromosome_gte?: Int;
  position?: Int;
  position_not?: Int;
  position_in?: Int[] | Int;
  position_not_in?: Int[] | Int;
  position_lt?: Int;
  position_lte?: Int;
  position_gt?: Int;
  position_gte?: Int;
  reference?: String;
  reference_not?: String;
  reference_in?: String[] | String;
  reference_not_in?: String[] | String;
  reference_lt?: String;
  reference_lte?: String;
  reference_gt?: String;
  reference_gte?: String;
  reference_contains?: String;
  reference_not_contains?: String;
  reference_starts_with?: String;
  reference_not_starts_with?: String;
  reference_ends_with?: String;
  reference_not_ends_with?: String;
  alternative?: String;
  alternative_not?: String;
  alternative_in?: String[] | String;
  alternative_not_in?: String[] | String;
  alternative_lt?: String;
  alternative_lte?: String;
  alternative_gt?: String;
  alternative_gte?: String;
  alternative_contains?: String;
  alternative_not_contains?: String;
  alternative_starts_with?: String;
  alternative_not_starts_with?: String;
  alternative_ends_with?: String;
  alternative_not_ends_with?: String;
  effect?: String;
  effect_not?: String;
  effect_in?: String[] | String;
  effect_not_in?: String[] | String;
  effect_lt?: String;
  effect_lte?: String;
  effect_gt?: String;
  effect_gte?: String;
  effect_contains?: String;
  effect_not_contains?: String;
  effect_starts_with?: String;
  effect_not_starts_with?: String;
  effect_ends_with?: String;
  effect_not_ends_with?: String;
  impact?: String;
  impact_not?: String;
  impact_in?: String[] | String;
  impact_not_in?: String[] | String;
  impact_lt?: String;
  impact_lte?: String;
  impact_gt?: String;
  impact_gte?: String;
  impact_contains?: String;
  impact_not_contains?: String;
  impact_starts_with?: String;
  impact_not_starts_with?: String;
  impact_ends_with?: String;
  impact_not_ends_with?: String;
  feature_type?: String;
  feature_type_not?: String;
  feature_type_in?: String[] | String;
  feature_type_not_in?: String[] | String;
  feature_type_lt?: String;
  feature_type_lte?: String;
  feature_type_gt?: String;
  feature_type_gte?: String;
  feature_type_contains?: String;
  feature_type_not_contains?: String;
  feature_type_starts_with?: String;
  feature_type_not_starts_with?: String;
  feature_type_ends_with?: String;
  feature_type_not_ends_with?: String;
  feature_id?: String;
  feature_id_not?: String;
  feature_id_in?: String[] | String;
  feature_id_not_in?: String[] | String;
  feature_id_lt?: String;
  feature_id_lte?: String;
  feature_id_gt?: String;
  feature_id_gte?: String;
  feature_id_contains?: String;
  feature_id_not_contains?: String;
  feature_id_starts_with?: String;
  feature_id_not_starts_with?: String;
  feature_id_ends_with?: String;
  feature_id_not_ends_with?: String;
  hgvs_codon_change?: String;
  hgvs_codon_change_not?: String;
  hgvs_codon_change_in?: String[] | String;
  hgvs_codon_change_not_in?: String[] | String;
  hgvs_codon_change_lt?: String;
  hgvs_codon_change_lte?: String;
  hgvs_codon_change_gt?: String;
  hgvs_codon_change_gte?: String;
  hgvs_codon_change_contains?: String;
  hgvs_codon_change_not_contains?: String;
  hgvs_codon_change_starts_with?: String;
  hgvs_codon_change_not_starts_with?: String;
  hgvs_codon_change_ends_with?: String;
  hgvs_codon_change_not_ends_with?: String;
  hgvs_protein_change?: String;
  hgvs_protein_change_not?: String;
  hgvs_protein_change_in?: String[] | String;
  hgvs_protein_change_not_in?: String[] | String;
  hgvs_protein_change_lt?: String;
  hgvs_protein_change_lte?: String;
  hgvs_protein_change_gt?: String;
  hgvs_protein_change_gte?: String;
  hgvs_protein_change_contains?: String;
  hgvs_protein_change_not_contains?: String;
  hgvs_protein_change_starts_with?: String;
  hgvs_protein_change_not_starts_with?: String;
  hgvs_protein_change_ends_with?: String;
  hgvs_protein_change_not_ends_with?: String;
  clinvar_significance?: String;
  clinvar_significance_not?: String;
  clinvar_significance_in?: String[] | String;
  clinvar_significance_not_in?: String[] | String;
  clinvar_significance_lt?: String;
  clinvar_significance_lte?: String;
  clinvar_significance_gt?: String;
  clinvar_significance_gte?: String;
  clinvar_significance_contains?: String;
  clinvar_significance_not_contains?: String;
  clinvar_significance_starts_with?: String;
  clinvar_significance_not_starts_with?: String;
  clinvar_significance_ends_with?: String;
  clinvar_significance_not_ends_with?: String;
  clinvar_disease?: String;
  clinvar_disease_not?: String;
  clinvar_disease_in?: String[] | String;
  clinvar_disease_not_in?: String[] | String;
  clinvar_disease_lt?: String;
  clinvar_disease_lte?: String;
  clinvar_disease_gt?: String;
  clinvar_disease_gte?: String;
  clinvar_disease_contains?: String;
  clinvar_disease_not_contains?: String;
  clinvar_disease_starts_with?: String;
  clinvar_disease_not_starts_with?: String;
  clinvar_disease_ends_with?: String;
  clinvar_disease_not_ends_with?: String;
  AND?: VariantWhereInput[] | VariantWhereInput;
  OR?: VariantWhereInput[] | VariantWhereInput;
  NOT?: VariantWhereInput[] | VariantWhereInput;
}

export interface GeneCreateInput {
  gene: String;
}

export type VariantWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SampleTissueUpdateManyMutationInput {
  tissue?: String;
}

export interface UserUpdateManyMutationInput {
  name?: String;
}

export type SampleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SampleTissueSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SampleTissueWhereInput;
  AND?:
    | SampleTissueSubscriptionWhereInput[]
    | SampleTissueSubscriptionWhereInput;
  OR?:
    | SampleTissueSubscriptionWhereInput[]
    | SampleTissueSubscriptionWhereInput;
  NOT?:
    | SampleTissueSubscriptionWhereInput[]
    | SampleTissueSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VariantConnection {
  pageInfo: PageInfo;
  edges: VariantEdge[];
}

export interface VariantConnectionPromise
  extends Promise<VariantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VariantEdge>>() => T;
  aggregate: <T = AggregateVariantPromise>() => T;
}

export interface VariantConnectionSubscription
  extends Promise<AsyncIterator<VariantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VariantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVariantSubscription>() => T;
}

export interface AggregateGene {
  count: Int;
}

export interface AggregateGenePromise
  extends Promise<AggregateGene>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGeneSubscription
  extends Promise<AsyncIterator<AggregateGene>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VariantPreviousValues {
  id: ID_Output;
  rsid?: String;
  type?: String;
  samples?: Int;
  chromosome?: Int;
  position?: Int;
  reference?: String;
  alternative?: String;
  effect?: String;
  impact?: String;
  feature_type?: String;
  feature_id?: String;
  hgvs_codon_change?: String;
  hgvs_protein_change?: String;
  clinvar_significance?: String;
  clinvar_disease?: String;
}

export interface VariantPreviousValuesPromise
  extends Promise<VariantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rsid: () => Promise<String>;
  type: () => Promise<String>;
  samples: () => Promise<Int>;
  chromosome: () => Promise<Int>;
  position: () => Promise<Int>;
  reference: () => Promise<String>;
  alternative: () => Promise<String>;
  effect: () => Promise<String>;
  impact: () => Promise<String>;
  feature_type: () => Promise<String>;
  feature_id: () => Promise<String>;
  hgvs_codon_change: () => Promise<String>;
  hgvs_protein_change: () => Promise<String>;
  clinvar_significance: () => Promise<String>;
  clinvar_disease: () => Promise<String>;
}

export interface VariantPreviousValuesSubscription
  extends Promise<AsyncIterator<VariantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rsid: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  samples: () => Promise<AsyncIterator<Int>>;
  chromosome: () => Promise<AsyncIterator<Int>>;
  position: () => Promise<AsyncIterator<Int>>;
  reference: () => Promise<AsyncIterator<String>>;
  alternative: () => Promise<AsyncIterator<String>>;
  effect: () => Promise<AsyncIterator<String>>;
  impact: () => Promise<AsyncIterator<String>>;
  feature_type: () => Promise<AsyncIterator<String>>;
  feature_id: () => Promise<AsyncIterator<String>>;
  hgvs_codon_change: () => Promise<AsyncIterator<String>>;
  hgvs_protein_change: () => Promise<AsyncIterator<String>>;
  clinvar_significance: () => Promise<AsyncIterator<String>>;
  clinvar_disease: () => Promise<AsyncIterator<String>>;
}

export interface GeneEdge {
  node: Gene;
  cursor: String;
}

export interface GeneEdgePromise extends Promise<GeneEdge>, Fragmentable {
  node: <T = GenePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GeneEdgeSubscription
  extends Promise<AsyncIterator<GeneEdge>>,
    Fragmentable {
  node: <T = GeneSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface VariantEdge {
  node: Variant;
  cursor: String;
}

export interface VariantEdgePromise extends Promise<VariantEdge>, Fragmentable {
  node: <T = VariantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VariantEdgeSubscription
  extends Promise<AsyncIterator<VariantEdge>>,
    Fragmentable {
  node: <T = VariantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVariant {
  count: Int;
}

export interface AggregateVariantPromise
  extends Promise<AggregateVariant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVariantSubscription
  extends Promise<AsyncIterator<AggregateVariant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Variant {
  id: ID_Output;
  rsid?: String;
  type?: String;
  samples?: Int;
  chromosome?: Int;
  position?: Int;
  reference?: String;
  alternative?: String;
  effect?: String;
  impact?: String;
  feature_type?: String;
  feature_id?: String;
  hgvs_codon_change?: String;
  hgvs_protein_change?: String;
  clinvar_significance?: String;
  clinvar_disease?: String;
}

export interface VariantPromise extends Promise<Variant>, Fragmentable {
  id: () => Promise<ID_Output>;
  rsid: () => Promise<String>;
  type: () => Promise<String>;
  samples: () => Promise<Int>;
  chromosome: () => Promise<Int>;
  position: () => Promise<Int>;
  reference: () => Promise<String>;
  alternative: () => Promise<String>;
  effect: () => Promise<String>;
  impact: () => Promise<String>;
  feature_type: () => Promise<String>;
  feature_id: () => Promise<String>;
  hgvs_codon_change: () => Promise<String>;
  hgvs_protein_change: () => Promise<String>;
  clinvar_significance: () => Promise<String>;
  clinvar_disease: () => Promise<String>;
}

export interface VariantSubscription
  extends Promise<AsyncIterator<Variant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rsid: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  samples: () => Promise<AsyncIterator<Int>>;
  chromosome: () => Promise<AsyncIterator<Int>>;
  position: () => Promise<AsyncIterator<Int>>;
  reference: () => Promise<AsyncIterator<String>>;
  alternative: () => Promise<AsyncIterator<String>>;
  effect: () => Promise<AsyncIterator<String>>;
  impact: () => Promise<AsyncIterator<String>>;
  feature_type: () => Promise<AsyncIterator<String>>;
  feature_id: () => Promise<AsyncIterator<String>>;
  hgvs_codon_change: () => Promise<AsyncIterator<String>>;
  hgvs_protein_change: () => Promise<AsyncIterator<String>>;
  clinvar_significance: () => Promise<AsyncIterator<String>>;
  clinvar_disease: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface VariantSubscriptionPayload {
  mutation: MutationType;
  node: Variant;
  updatedFields: String[];
  previousValues: VariantPreviousValues;
}

export interface VariantSubscriptionPayloadPromise
  extends Promise<VariantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VariantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VariantPreviousValuesPromise>() => T;
}

export interface VariantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VariantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VariantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VariantPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface GeneSubscriptionPayload {
  mutation: MutationType;
  node: Gene;
  updatedFields: String[];
  previousValues: GenePreviousValues;
}

export interface GeneSubscriptionPayloadPromise
  extends Promise<GeneSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GenePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GenePreviousValuesPromise>() => T;
}

export interface GeneSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GeneSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GeneSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GenePreviousValuesSubscription>() => T;
}

export interface SampleTissueEdge {
  node: SampleTissue;
  cursor: String;
}

export interface SampleTissueEdgePromise
  extends Promise<SampleTissueEdge>,
    Fragmentable {
  node: <T = SampleTissuePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SampleTissueEdgeSubscription
  extends Promise<AsyncIterator<SampleTissueEdge>>,
    Fragmentable {
  node: <T = SampleTissueSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GenePreviousValues {
  id: ID_Output;
  gene: String;
}

export interface GenePreviousValuesPromise
  extends Promise<GenePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gene: () => Promise<String>;
}

export interface GenePreviousValuesSubscription
  extends Promise<AsyncIterator<GenePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gene: () => Promise<AsyncIterator<String>>;
}

export interface SampleTissue {
  id: ID_Output;
  tissue: String;
}

export interface SampleTissuePromise
  extends Promise<SampleTissue>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tissue: () => Promise<String>;
}

export interface SampleTissueSubscription
  extends Promise<AsyncIterator<SampleTissue>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tissue: () => Promise<AsyncIterator<String>>;
}

export interface GeneConnection {
  pageInfo: PageInfo;
  edges: GeneEdge[];
}

export interface GeneConnectionPromise
  extends Promise<GeneConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GeneEdge>>() => T;
  aggregate: <T = AggregateGenePromise>() => T;
}

export interface GeneConnectionSubscription
  extends Promise<AsyncIterator<GeneConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GeneEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGeneSubscription>() => T;
}

export interface SampleEdge {
  node: Sample;
  cursor: String;
}

export interface SampleEdgePromise extends Promise<SampleEdge>, Fragmentable {
  node: <T = SamplePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SampleEdgeSubscription
  extends Promise<AsyncIterator<SampleEdge>>,
    Fragmentable {
  node: <T = SampleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SampleSubscriptionPayload {
  mutation: MutationType;
  node: Sample;
  updatedFields: String[];
  previousValues: SamplePreviousValues;
}

export interface SampleSubscriptionPayloadPromise
  extends Promise<SampleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SamplePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SamplePreviousValuesPromise>() => T;
}

export interface SampleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SampleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SampleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SamplePreviousValuesSubscription>() => T;
}

export interface Sample {
  id: ID_Output;
  sample_tissue: String;
  z_score: Int;
  gene: String;
}

export interface SamplePromise extends Promise<Sample>, Fragmentable {
  id: () => Promise<ID_Output>;
  sample_tissue: () => Promise<String>;
  z_score: () => Promise<Int>;
  gene: () => Promise<String>;
}

export interface SampleSubscription
  extends Promise<AsyncIterator<Sample>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sample_tissue: () => Promise<AsyncIterator<String>>;
  z_score: () => Promise<AsyncIterator<Int>>;
  gene: () => Promise<AsyncIterator<String>>;
}

export interface SamplePreviousValues {
  id: ID_Output;
  sample_tissue: String;
  z_score: Int;
  gene: String;
}

export interface SamplePreviousValuesPromise
  extends Promise<SamplePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sample_tissue: () => Promise<String>;
  z_score: () => Promise<Int>;
  gene: () => Promise<String>;
}

export interface SamplePreviousValuesSubscription
  extends Promise<AsyncIterator<SamplePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sample_tissue: () => Promise<AsyncIterator<String>>;
  z_score: () => Promise<AsyncIterator<Int>>;
  gene: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface SampleTissueConnection {
  pageInfo: PageInfo;
  edges: SampleTissueEdge[];
}

export interface SampleTissueConnectionPromise
  extends Promise<SampleTissueConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SampleTissueEdge>>() => T;
  aggregate: <T = AggregateSampleTissuePromise>() => T;
}

export interface SampleTissueConnectionSubscription
  extends Promise<AsyncIterator<SampleTissueConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SampleTissueEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSampleTissueSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface SampleTissuePreviousValues {
  id: ID_Output;
  tissue: String;
}

export interface SampleTissuePreviousValuesPromise
  extends Promise<SampleTissuePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tissue: () => Promise<String>;
}

export interface SampleTissuePreviousValuesSubscription
  extends Promise<AsyncIterator<SampleTissuePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tissue: () => Promise<AsyncIterator<String>>;
}

export interface SampleTissueSubscriptionPayload {
  mutation: MutationType;
  node: SampleTissue;
  updatedFields: String[];
  previousValues: SampleTissuePreviousValues;
}

export interface SampleTissueSubscriptionPayloadPromise
  extends Promise<SampleTissueSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SampleTissuePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SampleTissuePreviousValuesPromise>() => T;
}

export interface SampleTissueSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SampleTissueSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SampleTissueSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SampleTissuePreviousValuesSubscription>() => T;
}

export interface Gene {
  id: ID_Output;
  gene: String;
}

export interface GenePromise extends Promise<Gene>, Fragmentable {
  id: () => Promise<ID_Output>;
  gene: () => Promise<String>;
}

export interface GeneSubscription
  extends Promise<AsyncIterator<Gene>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gene: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSample {
  count: Int;
}

export interface AggregateSamplePromise
  extends Promise<AggregateSample>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSampleSubscription
  extends Promise<AsyncIterator<AggregateSample>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateSampleTissue {
  count: Int;
}

export interface AggregateSampleTissuePromise
  extends Promise<AggregateSampleTissue>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSampleTissueSubscription
  extends Promise<AsyncIterator<AggregateSampleTissue>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SampleConnection {
  pageInfo: PageInfo;
  edges: SampleEdge[];
}

export interface SampleConnectionPromise
  extends Promise<SampleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SampleEdge>>() => T;
  aggregate: <T = AggregateSamplePromise>() => T;
}

export interface SampleConnectionSubscription
  extends Promise<AsyncIterator<SampleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SampleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSampleSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Gene",
    embedded: false
  },
  {
    name: "Sample",
    embedded: false
  },
  {
    name: "SampleTissue",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Variant",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
